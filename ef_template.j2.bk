#jinja2: lstrip_blocks: "True", trim_blocks: "True"
#############################################
# CTRL+H (Find & Replace)
#############################################
# {{data['<HOSTNAME>']}} - Hostname
# {{data['<EF_LOOPBACK>']}} - Loopback IP address without CIDR mask
# {{data['<PRESHARED_KEY>']}} - Pre-shared key for IKE policy
# {{data['<CS_NAME>']}} - Hostname of CS01
# {{data['<CS_UPLINK_N0>']}} - Name of interface on CS01 n0 that uplinks to this port
# {{data['<CS_UPLINK_N1>']}} - Name of interface on CS01 n1 that uplinks to this port
# {{data['<VL901_EF01>']}} - IP address of EF01 downlink to CS01
# {{data['<WAN1_ISPNAME>']}} - Provider name for ISP1
# {{data['<WAN1_CKT_ID>']}} - Circuit ID
# {{data['<WAN1_SUPPORT_NO>']}} - Support number
# {{data['<WAN1_UP>']}} - Upload speed of ISP1, provide suffix (b, k, m, g, etc.)
# {{data['<WAN1_DOWN>']}} - Download speed of ISP1, provide suffix (b, k, m, g, etc.)
# {{data['<WAN1_IP>']}} - WAN1 IP address with CIDR mask
# {{data['<WAN1_GW>']}} - WAN1 IP address of gateway
# {{data['<WAN2_ISPNAME>']}} - Provider name for ISP2
# {{data['<WAN2_CKT_ID>']}}- Circuit ID
# {{data['<WAN2_SUPPORT_NO>']}} - Support number
# {{data['<WAN2_UP>']}} - Upload speed of ISP2, provide suffix (b, k, m, g, etc.)
# {{data['<WAN2_DOWN>']}} - Download speed of ISP2, provide suffix (b, k, m, g, etc.)
# {{data['<WAN2_IP>']}} - WAN2 IP address with CIDR mask
# {{data['<WAN2_GW>']}}- WAN2 IP address of gateway
# {{data['<ATL_TUN1_IP>']}} - IP address ATL tunnel 1
# {{data['<ATL_TUN2_IP>']}} - IP address ATL tunnel 2
# {{data['<DAL_TUN1_IP>']}} - IP address DAL tunnel 1
# {{data['<DAL_TUN2_IP>']}} - IP address DAL tunnel 2
# {{data['<SITE_ADDRESS>']}} - Physical site address
# {{data['<VL901_CS01>']}} - IP address of CS01 on VL901
# {{data['<SITE_SUPERNET>']}} - Site supernet including CIDR mask (e.g. 10.65.0.0/22)
# {{data['<BGP_ASN>']}} - ASN of branch office
# {{data['<ATL_TUN1_PEER>']}} - IP address of BGP peer on ATL tunnel 1
# {{data['<ATL_TUN2_PEER>']}} - IP address of BGP peer on ATL tunnel 2
# {{data['<DAL_TUN1_PEER>']}} - IP address of BGP peer on DAL tunnel 1
# {{data['<DAL_TUN2_PEER>']}} - IP address of BGP peer on DAL tunnel 2
#############################################
# EF v1.0 - 06/03/2019
#############################################
groups {
    node0 {
        system {
            syslog {
                file default-log-messages {
                    any any;
                    match "(requested 'commit' operation)|(copying configuration to juniper.save)|(commit complete)|ifAdminStatus|(FRU power)|(FRU removal)|(FRU insertion)|(link UP)|transitioned|Transferred|transfer-file|(license add)|(license delete)|(package -X update)|(package -X delete)|(FRU Online)|(FRU Offline)|(plugged in)|(unplugged)|GRES|(AIS_DATA_AVAILABLE)";
                    structured-data;
                }
            }
        }
    }
    node1 {
        system {
            syslog {
                file default-log-messages {
                    any any;
                    match "(requested 'commit' operation)|(copying configuration to juniper.save)|(commit complete)|ifAdminStatus|(FRU power)|(FRU removal)|(FRU insertion)|(link UP)|transitioned|Transferred|transfer-file|(license add)|(license delete)|(package -X update)|(package -X delete)|(FRU Online)|(FRU Offline)|(plugged in)|(unplugged)|GRES|(AIS_DATA_AVAILABLE)";
                    structured-data;
                }
            }
        }
    }
    PROTECT-RE-GROUP {
        interfaces {
            lo0 {
                unit <*> {
                    family inet {
                        filter {
                            input PROTECT-RE;
                        }
                    }
                }
            }
        }
        policy-options {
            prefix-list DII-SNMP-HOSTS {
                /* Dycom - ATL Jump Box Subnet */
                10.3.0.0/24;
                /* Dycom - ATL Netmon Subnet */
                10.3.4.0/24;
                /* Dycom - AWS Management Subnet */
                10.135.0.0/23;
            }
            prefix-list localhost {
                127.0.0.1/32;
                apply-path "interfaces lo0 unit <*> family inet address <*>";
            }
            prefix-list DII-RADIUS-SRVS {
                apply-path "system radius-server <*.*>";
            }
            prefix-list NTP-PEERS-IPV4 {
                apply-path "system ntp server <*.*>";
            }
            prefix-list DII-NTP-SERVER {
                apply-path "system ntp server <*>";
            }
            prefix-list DII-DNS-SERVERS {
                apply-path "system name-server <*>";
            }
            prefix-list DII-BGP-NEIGHBORS-GLOBAL {
                apply-path "protocols bgp group <*> neighbor <*>";
            }
            prefix-list DII-BGP-NEIGHBORS-ROUTING-INSTANCES {
                apply-path "routing-instances <*> protocols bgp group <*> neighbor <*>";
            }
            prefix-list DII-RADIUS-SERVERS {
                apply-path "system radius-server <*>";
            }
            prefix-list DII-LOCAL-INTERFACES {
                apply-path "interfaces <*> unit <*> family inet address <*>";
            }
            prefix-list ospf {
                224.0.0.5/32;
                224.0.0.6/32;
            }
            prefix-list vrrp {
                224.0.0.18/32;
            }
            prefix-list DII-MGMT-SSH-PUBLIC-IP {
                /* Dycom - RCA ATT ISP */
                12.247.119.196/30;
                /* Dycom - Atlanta DC Internet */
                65.167.210.0/24;
                /* Dycom - Atlanta DC Internet */
                162.244.184.0/21;
                /* Dycom - RCA FPL ISP */
                199.189.199.184/29;
                /* Dycom - DC Internet */
                209.64.224.0/19;
            }
            prefix-list DII-RFC1918 {
                /* Dycom - Internal Subnets */
                10.0.0.0/8;
                172.16.0.0/12;
                192.168.0.0/16;
            }
        }
        firewall {
            family inet {
                filter PROTECT-RE {
                    term DISCARD-FRAGMENTS {
                        from {
                            is-fragment;
                        }
                        then {
                            discard;
                        }
                    }
                    term ACCEPT-ICMP {
                        from {
                            protocol icmp;
                            icmp-type [ echo-reply echo-request unreachable time-exceeded ];
                        }
                        then accept;
                    }
                    term ACCEPT-TRACEROUTE-UDP {
                        from {
                            protocol udp;
                            port 33434-33534;
                        }
                        then accept;
                    }
                    term ACCEPT-SSH {
                        from {
                            source-prefix-list {
                                DII-RFC1918;
                                DII-MGMT-SSH-PUBLIC-IP;
                            }
                            protocol tcp;
                            port ssh;
                        }
                        then accept;
                    }
                    term ACCEPT-SNMP {
                        from {
                            source-prefix-list {
                                DII-SNMP-HOSTS;
                            }
                            protocol udp;
                            port snmp;
                        }
                        then accept;
                    }
                    term ACCEPT-NTP {
                        from {
                            source-prefix-list {
                                localhost;
                                DII-NTP-SERVER;
                            }
                            protocol udp;
                            port ntp;
                        }
                        then accept;
                    }
                    term ACCEPT-DNS {
                        from {
                            source-prefix-list {
                                DII-DNS-SERVERS;
                            }
                            protocol [ udp tcp ];
                            port domain;
                        }
                        then accept;
                    }
                    term ACCEPT-BFD {
                        from {
                            protocol udp;
                            port [ 3784-3785 4784 49152-65535 ];
                        }
                        then accept;
                    }
                    term ACCEPT-BGP {
                        from {
                            source-prefix-list {
                                DII-BGP-NEIGHBORS-GLOBAL;
                                DII-BGP-NEIGHBORS-ROUTING-INSTANCES;
                            }
                            protocol tcp;
                            port bgp;
                        }
                        then accept;
                    }
                    term ACCEPT-OSPF {
                        from {
                            source-prefix-list {
                                DII-LOCAL-INTERFACES;
                            }
                            protocol ospf;
                        }
                        then accept;
                    }
                    term ACCEPT-VRRP {
                        from {
                            source-prefix-list {
                                DII-LOCAL-INTERFACES;
                            }
                            protocol [ vrrp ah ];
                        }
                        then accept;
                    }
                    term ACCEPT-VPN {
                        from {
                            protocol [ udp esp ];
                            port [ 500 4500 ];
                        }
                        then accept;
                    }
                    term ACCEPT-RADIUS {
                        from {
                            source-prefix-list {
                                DII-RADIUS-SERVERS;
                            }
                            protocol udp;
                            port [ radacct radius ];
                        }
                        then accept;
                    }
                    term ACCEPT-DHCP {
                        from {
                            protocol udp;
                            port [ bootps bootpc ];
                        }
                        then accept;
                    }
                    term TCP-ESTABLISHED {
                        from {
                            protocol tcp;
                            tcp-established;
                        }
                        then accept;
                    }
                    term DISCARD {
                        then {
                            discard;
                        }
                    }
                }
            }
        }
    }
}
apply-groups [ "${node}" PROTECT-RE-GROUP ];
system {
    host-name {{data['<HOSTNAME>']}};
    time-zone UTC;
    internet-options {
        path-mtu-discovery;
        tcp-drop-synfin-set;
    }
    authentication-order radius;
    ports {
        console {
            authentication-order radius;
            log-out-on-disconnect;
        }
        auxiliary disable;
    }
    root-authentication {
        encrypted-password "$1$yCWhAN5c$sNswlOhij0F.UiRXFku0K0"; ## SECRET-DATA
    }
    name-server {
        10.3.33.55 source-address {{data['<EF_LOOPBACK>']}};
    }
    radius-server {
        10.132.8.128 {
            port 1812;
            secret "$9$NC-VsUjqf5FGUz69Cu0vWLN-wgoZjk.WLGi.mTQcylKvW"; ## SECRET-DATA
            timeout 1;
            source-address {{data['<EF_LOOPBACK>']}};
        }
        10.132.10.152 {
            port 1812;
            secret "$9$NC-VsUjqf5FGUz69Cu0vWLN-wgoZjk.WLGi.mTQcylKvW"; ## SECRET-DATA
            timeout 1;
            source-address {{data['<EF_LOOPBACK>']}};
        }
    }
    radius-options {
        password-protocol mschap-v2;
    }
    accounting {
        events [ login change-log interactive-commands ];
        destination {
            radius;
        }
    }
    login {
        message "\n\nWARNING: Restricted System, Property of Dycom, Inc. or its subsidiaries.\nThis computer system is for OFFICIAL USE ONLY by specifically authorized \npersonnel and includes confidential, proprietary and privileged information. \nThis system may be subject to monitoring. No expectation of privacy is to be \nassumed. Unauthorized attempts to upload, download or change information on \nthis system or other unauthorized activities are subject to disciplinary action \nincluding termination and criminal and civil prosecution. By continuing to use \nthis system you indicate your awareness of and consent to these terms and \nconditions of use.\n\n\n";
        retry-options {
            tries-before-disconnect 3;
            backoff-threshold 1;
            backoff-factor 5;
            lockout-period 10;
        }
        {%- if data['<MODEL>'] is not in ['SRX210', 'SRX240'] %}
        idle-timeout 60;
        {%- endif %}
        user dycom {
            uid 2001;
            class super-user;
            authentication {
                encrypted-password "$1$yCWhAN5c$sNswlOhij0F.UiRXFku0K0"; ## SECRET-DATA
            }
        }
        user remote {
            full-name "RADIUS Remote Users";
            uid 2100;
            class super-user;
        }
    }
    services {
        ssh {
            root-login deny;
            no-tcp-forwarding;
            protocol-version v2;
            max-sessions-per-connection 10;
            ciphers [ aes256-ctr "aes256-gcm@openssh.com" "chacha20-poly1305@openssh.com" aes256-cbc ];
            macs [ "umac-128-etm@openssh.com" hmac-sha2-256 "hmac-sha2-256-etm@openssh.com" "hmac-sha2-512-etm@openssh.com" "umac-64-etm@openssh.com" ];
            key-exchange [ curve25519-sha256 group-exchange-sha2 ecdh-sha2-nistp256 ecdh-sha2-nistp384 ecdh-sha2-nistp521 ];
            client-alive-count-max 4;
            client-alive-interval 10;
            hostkey-algorithm {
                no-ssh-dss;
                ssh-rsa;
                no-ssh-ecdsa;
                ssh-ed25519;
            }
            fingerprint-hash sha2-256;
            connection-limit 30;
            rate-limit 5;
        }
        netconf {
            ssh;
            {%- if data['<MODEL>'] is not in ['SRX210', 'SRX240'] %}
            rfc-compliant;
            {%- endif %}
        }
    }
    syslog {
        archive size 1m files 10 world-readable;
        user * {
            any emergency;
        }
        host 10.3.64.68 {
            any info;
            authorization any;
            structured-data {
                brief;
            }
        }
        host 10.3.4.25 {
            any notice;
            explicit-priority;
        }
        host 10.3.4.27 {
            any notice;
            explicit-priority;
        }
        file messages {
            any warning;
            authorization error;
        }
        file interactive-commands {
            interactive-commands error;
        }
        file kmd-logs {
            daemon info;
            match KMD;
        }
        file authorization {
            authorization error;
            match User;
        }
        time-format year millisecond;
        source-address {{data['<EF_LOOPBACK>']}};
    }
    ntp {
        server 199.255.122.221 version 4;
        server 199.68.212.201 version 4;
    }
}
chassis {
    usb {
        storage {
            disable;
        }
    }
    {%- if data['<EF_TYPE>'] == 'Cluster' %}
    cluster {
        control-link-recovery;
        reth-count 3;
        heartbeat-interval 1000;
        heartbeat-threshold 3;
        redundancy-group 0 {
            node 0 priority 200;
            node 1 priority 100;
        }
        redundancy-group 1 {
            node 0 priority 200;
            node 1 priority 100;
            preempt;
            interface-monitor {
            {%- if data['<MODEL>'] == 'SRX300' %}
                ge-0/0/5 weight 255;
                ge-1/0/5 weight 255;
            {%- endif %}
            {%- if data['<MODEL>'] == 'SRX320' %}
                ge-0/0/4 weight 255;
                ge-3/0/4 weight 255;
            {%- endif %}
            {%- if data['<MODEL>'] == 'SRX340' %}
                ge-0/0/5 weight 255;
                ge-5/0/5 weight 255;
            {%- endif %}
            {%- if data['<MODEL>'] == 'SRX1500' %}
                ge-0/0/5 weight 255;
                ge-7/0/5 weight 255;
            {%- endif %}
            }
        }
        redundancy-group 2 {
            node 0 priority 200;
            node 1 priority 100;
            preempt;
        }
        redundancy-group 3 {
            node 0 priority 100;
            node 1 priority 200;
            preempt;
        }
    }
    {%- endif %}
}
{%- if data['<EF_TYPE>'] == 'Cluster' %}
services {
    rpm {
        probe ISP1 {
            test ISP1 {
                target address 8.8.8.8;
                probe-count 3;
                probe-interval 10;
                test-interval 5;
                routing-instance VR_ISP_1;
                thresholds {
                    successive-loss 3;
                    total-loss 3;
                }
            }
        }
    }
}
{%- endif %}
security {
    log {
        mode stream;
        format sd-syslog;
        source-address {{data['<EF_LOOPBACK>']}};
        stream strm {
            category all;
            host {
                10.3.64.68;
                port 514;
            }
        }
    }
    ike {
        {%- if data['<DHCP>'] == 'Yes' %}
        proposal IKE-PRE-G2-3DES-SHA {
            authentication-method pre-shared-keys;
            authentication-algorithm sha1;
            encryption-algorithm 3des-cbc;
        }
        {%- endif %}
        proposal IKE-PROPOSAL-DYC19 {
            authentication-method pre-shared-keys;
            dh-group group24;
            encryption-algorithm aes-256-gcm;
            lifetime-seconds 28800;
        }
        {%- if data['<DHCP>'] == 'No' %}
        policy IKE-POLICY {
            proposals IKE-PROPOSAL-DYC19;
            pre-shared-key ascii-text "{{data['<PRESHARED_KEY>']}}";
        }
        {%- endif %}
        {%- if data['<DHCP>'] == 'Yes' %}
        policy IKE-POLICY-DYNAMIC {
            mode aggressive;
            proposals IKE-PRE-G2-3DES-SHA;
            pre-shared-key ascii-text "$9$e04KMLs2ojH.P5uBIhleW8X7NdVwgJUH7-jHqPQzevMXVw                                                   "; ## SECRET-DATA
        }
        policy IKEv2-POLICY-DYNAMIC {
            proposals IKE-PROPOSAL-DYC19;
            pre-shared-key ascii-text "$9$NE-VsUjkTzn/CSlKW7NbwYg4aJGi.fzgoTz3/tpNdVYJG"                                                   ; ## SECRET-DATA
        }
        {%- endif %}
        gateway IKE-GW-ATL-P {
            {%- if data['<DHCP>'] == 'No' %}
            ike-policy IKE-POLICY;
            {%- endif %}
            {%- if data['<DHCP>'] == 'Yes' %}
            ike-policy IKE-POLICY-DYNAMIC;
            {%- endif %}
            address 209.64.225.210;
            {%- if data['<EF_TYPE>'] == 'Cluster' %}
            external-interface reth1.0;
            {%- endif %}
            {%- if data['<MODEL>'] is in ['SRX240', 'SRX300', 'SRX320', 'SRX340', 'SRX1500'] and data['<EF_TYPE>'] != 'Cluster' %}
            external-interface ge-0/0/4.0;
            {%- endif %}
            {%- if data['<MODEL>'] is in ['SRX210'] and data['<EF_TYPE>'] != 'Cluster' %}
            external-interface ge-0/0/0.0;
            {%- endif %}
            {%- if data['<DHCP>'] == 'No' %}
            version v2-only;
            {%- endif %}
            {%- if data['<DHCP>'] == 'Yes' %}
            local-identity hostname {{data['<IKEHOST>']}};
            {%- endif %}
        }
        {%- if data['<EF_TYPE>'] == 'Cluster' %}
        gateway IKE-GW-ATL-B {
            ike-policy IKE-POLICY;
            address 209.64.225.210;
            external-interface reth2.0;
            version v2-only;
        }
        {%- endif %}
        gateway IKE-GW-DAL-P {
            {%- if data['<DHCP>'] == 'No' %}
            ike-policy IKE-POLICY;
            {%- endif %}
            {%- if data['<DHCP>'] == 'Yes' %}
            ike-policy IKEv2-POLICY-DYNAMIC;
            {%- endif %}
            address 209.64.241.210;
            {%- if data['<EF_TYPE>'] == 'Cluster' %}
            external-interface reth1.0;
            {%- endif %}
            {%- if data['<MODEL>'] is in ['SRX240', 'SRX300', 'SRX320', 'SRX340', 'SRX1500'] and data['<EF_TYPE>'] != 'Cluster' %}
            external-interface ge-0/0/4.0;
            {%- endif %}
            {%- if data['<MODEL>'] is in ['SRX210'] and data['<EF_TYPE>'] != 'Cluster' %}
            external-interface ge-0/0/0.0;
            {%- endif %}
            version v2-only;
            {%- if data['<DHCP>'] == 'Yes' %}
            local-identity hostname {{data['<IKEHOST>']}};
            {%- endif %}
        }
        {%- if data['<EF_TYPE>'] == 'Cluster' %}
        gateway IKE-GW-DAL-B {
            ike-policy IKE-POLICY;
            address 209.64.241.210;
            external-interface reth2.0;
            version v2-only;
        }
        {%- endif %}
    }
    ipsec {
        {%- if data['<DHCP>'] == 'Yes' %}
        proposal IPSEC-ESP-AES256-SHA {
            protocol esp;
            authentication-algorithm hmac-sha1-96;
            encryption-algorithm aes-256-cbc;
            lifetime-seconds 3600;
        }
        {%- endif %}
        proposal IPSEC-DYC19 {
            protocol esp;
            encryption-algorithm aes-256-gcm;
            lifetime-seconds 27000;
        }
       {%- if data['<DHCP>'] == 'Yes' %}
        policy IPSEC-POLICY {
            proposals IPSEC-ESP-AES256-SHA;
        }   
        {%- endif %}
       {%- if data['<DHCP>'] == 'No' %}
        policy IPSEC-POLICY {
            perfect-forward-secrecy {
                keys group24;
            }
            proposals IPSEC-DYC19;
        }
        {%- endif %}
        vpn VPN-ATL-P {
            bind-interface st0.0;
            ike {
                gateway IKE-GW-ATL-P;
                ipsec-policy IPSEC-POLICY;
            }
        }
        {%- if data['<EF_TYPE>'] == 'Cluster' %}
         vpn VPN-ATL-B {
            bind-interface st0.1;
            ike {
                gateway IKE-GW-ATL-B;
                ipsec-policy IPSEC-POLICY;
            }
        }
         {%- endif %}
        vpn VPN-DAL-P {
            bind-interface st0.10;
            ike {
                gateway IKE-GW-DAL-P;
                {%- if data['<DHCP>'] == 'No' %}
                ipsec-policy IPSEC-POLICY;
                {%- endif %}
                {%- if data['<DHCP>'] == 'Yes' %}
                ipsec-policy IPSEC-DYC19;
                {%- endif %}
            }
        }
        {%- if data['<EF_TYPE>'] == 'Cluster' %}
        vpn VPN-DAL-B {
            bind-interface st0.11;
            ike {
                gateway IKE-GW-DAL-B;
                ipsec-policy IPSEC-POLICY;
            }
        }
        {%- endif %}
    }
    forwarding-options {
        family {
            inet6 {
                mode flow-based;
            }
        }
    }
    flow {
        tcp-mss {
            all-tcp {
                mss 1452;
            }
            ipsec-vpn {
                mss 1350;
            }
        }
    }
    nat {
        source {
            rule-set TRUST-to-UNTRUST {
                from zone [ TRUST junos-host ];
                to zone [ UNTRUST_ISP_1 UNTRUST_ISP_2 ];
                rule source-nat-rule {
                    match {
                        source-address 0.0.0.0/0;
                    }
                    then {
                        source-nat {
                            interface;
                        }
                    }
                }
            }
        }
    }
    policies {
        global {
            policy TRUST-TO-UNTRUST {
                match {
                    source-address any;
                    destination-address any;
                    application any;
                    from-zone TRUST;
                    to-zone [ UNTRUST_ISP_1 UNTRUST_ISP_2 ];
                }
                then {
                    permit;
                    log {
                        session-close;
                    }
                }
            }
            policy TRUST-VPN {
                match {
                    source-address any;
                    destination-address any;
                    application any;
                    from-zone [ TRUST VPN ];
                    to-zone [ TRUST VPN ];
                }
                then {
                    permit;
                    log {
                        session-close;
                    }
                }
            }
        }
    }
    zones {
        security-zone TRUST {
            host-inbound-traffic {
                system-services {
                    ping;
                    snmp;
                    ssh;
                    traceroute;
                }
            }
            interfaces {
                lo0.0;
                {%- if data['<EF_TYPE>'] == 'Cluster' %}
                reth0.901;
                {%- endif %}
                {%- if data['<EF_TYPE>'] == 'Single' and data['<MODEL>'] != 'SRX210' %}
                ge-0/0/5.0;
                {%- endif %}
                {%- if data['<EF_TYPE>'] == 'Single' and data['<MODEL>'] == 'SRX210' %}
                ge-0/0/1.0;
                {%- endif %}
            }
        }
        security-zone UNTRUST_ISP_1 {
            host-inbound-traffic {
                system-services {
                    dhcp;
                    ike;
                    ping;
                    ssh;
                    traceroute;
                }
            }
            interfaces {
            {%- if data['<EF_TYPE>'] == 'Single' and data['<MODEL>'] != 'SRX210' %}
            ge-0/0/4.0;
            {%- endif %}
            {%- if data['<EF_TYPE>'] == 'Single' and data['<MODEL>'] == 'SRX210' %}
            ge-0/0/0.0;
            {%- endif %}
            {%- if data['<EF_TYPE>'] == 'Cluster' %}
            reth1.0;
            {%- endif %}
            }
        }
        security-zone UNTRUST_ISP_2 {
            host-inbound-traffic {
                system-services {
                    dhcp;
                    ike;
                    ping;
                    ssh;
                    traceroute;
                }
            }
            {%- if data['<EF_TYPE>'] == 'Cluster' %}
            interfaces {
            reth2.0;
            }
            {%- endif %}
        }
        security-zone VPN {
            host-inbound-traffic {
                system-services {
                    ping;
                    snmp;
                    ssh;
                    traceroute;
                }
                protocols {
                    bgp;
                }
            }
            interfaces {
                st0.0;
                st0.10;
                {%- if data['<EF_TYPE>'] == 'Cluster' %}
                st0.1;
                st0.11;
                {%- endif %}
            }
        }
    }
}
interfaces {
    {%- if data['<EF_TYPE>'] == 'Single' and data['<MODEL>'] != 'SRX210' %}
    ge-0/0/4 {
        description "ISP - {{data['<WAN1_ISPNAME>']}} - {{data['<WAN1_DOWN>']}}/{{data['<WAN1_UP>']}} - {{data['<WAN1_CKT_ID>']}} - {{data['<WAN1_SUPPORT_NO>']}}";
        per-unit-scheduler;
        unit 0 {
            bandwidth {{data['<WAN1_DOWN>']}};
            {%- if data['<DHCP>'] == 'No' %}
            family inet address {{data['<WAN1_IP>']}};
            {%- endif %}
            {%- if data['<DHCP>'] == 'Yes' %}
            family inet dhcp;
            {%- endif %}
        }
    }
    ge-0/0/5 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        unit 0 {
            family inet address {{data['<VL901_EF01>']}}/31;
        }
    }
    {%- endif %}
    {%- if data['<EF_TYPE>'] == 'Single' and data['<MODEL>'] == 'SRX210' %}
    ge-0/0/0 {
        description "ISP - {{data['<WAN1_ISPNAME>']}} - {{data['<WAN1_DOWN>']}}/{{data['<WAN1_UP>']}} - {{data['<WAN1_CKT_ID>']}} - {{data['<WAN1_SUPPORT_NO>']}}";
        per-unit-scheduler;
        unit 0 {
            bandwidth {{data['<WAN1_DOWN>']}};
            {%- if data['<DHCP>'] == 'No' %}
            family inet address {{data['<WAN1_IP>']}};
            {%- endif %}
            {%- if data['<DHCP>'] == 'Yes' %}
            family inet dhcp;
            {%- endif %}
        }
    }
    ge-0/0/1 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        unit 0 {
            family inet address {{data['<VL901_EF01>']}}/31;
        }
    }
    {%- endif %}
    {%- if data['<EF_TYPE>'] == 'Single' and data['<MODEL>'] == 'SRX240' %}
    ge-0/0/4 {
        description "ISP - {{data['<WAN1_ISPNAME>']}} - {{data['<WAN1_DOWN>']}}/{{data['<WAN1_UP>']}} - {{data['<WAN1_CKT_ID>']}} - {{data['<WAN1_SUPPORT_NO>']}}";
        per-unit-scheduler;
        unit 0 {
            bandwidth {{data['<WAN1_DOWN>']}};
            {%- if data['<DHCP>'] == 'No' %}
            family inet address {{data['<WAN1_IP>']}};
            {%- endif %}
            {%- if data['<DHCP>'] == 'Yes' %}
            family inet dhcp;
            {%- endif %}
        }
    }
    ge-0/0/5 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        unit 0 {
            family inet address {{data['<VL901_EF01>']}}/31;
        }
    }
    {%- endif %}
    {%- if data['<EF_TYPE>'] == 'Cluster' and data['<MODEL>'] == 'SRX300' %}
    ge-0/0/4 {
        description "ISP - {{data['<WAN1_ISPNAME>']}} - {{data['<WAN1_DOWN>']}}/{{data['<WAN1_UP>']}} - {{data['<WAN1_CKT_ID>']}} - {{data['<WAN1_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth1;
        }
    }
    ge-0/0/5 {
        description  "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    ge-1/0/4 {
        description "ISP - {{data['<WAN2_ISPNAME>']}} - {{data['<WAN2_DOWN>']}}/{{data['<WAN2_UP>']}} - {{data['<WAN2_CKT_ID>']}} - {{data['<WAN2_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth2;
        }
    }
    ge-1/0/5 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    fab0 {
        fabric-options {
            member-interfaces {
                ge-0/0/2;
            }
        }
    }
    fab1 {
        fabric-options {
            member-interfaces {
                ge-1/0/2;
            }
        }
    }
    fab1 {
        fabric-options {
            member-interfaces {
                ge-7/0/2;
            }
        }
    }
    {%- endif %}
    {%- if data['<EF_TYPE>'] == 'Cluster' and data['<MODEL>'] == 'SRX320' %}
    ge-0/0/4 {
        description "ISP - {{data['<WAN1_ISPNAME>']}} - {{data['<WAN1_DOWN>']}}/{{data['<WAN1_UP>']}} - {{data['<WAN1_CKT_ID>']}} - {{data['<WAN1_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth1;
        }
    }
    ge-0/0/5 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    ge-3/0/4 {
        description "ISP - {{data['<WAN2_ISPNAME>']}} - {{data['<WAN2_DOWN>']}}/{{data['<WAN2_UP>']}} - {{data['<WAN2_CKT_ID>']}} - {{data['<WAN2_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth2;
        }
    }
    ge-3/0/5 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    fab0 {
        fabric-options {
            member-interfaces {
                ge-0/0/2;
            }
        }
    }
    fab1 {
        fabric-options {
            member-interfaces {
                ge-3/0/2;
            }
        }
    }
    {%- endif %}
    {%- if data['<EF_TYPE>'] == 'Cluster' and data['<MODEL>'] == 'SRX340' %}
    ge-0/0/4 {
        description "ISP - {{data['<WAN1_ISPNAME>']}} - {{data['<WAN1_DOWN>']}}/{{data['<WAN1_UP>']}} - {{data['<WAN1_CKT_ID>']}} - {{data['<WAN1_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth1;
        }
    }
    ge-0/0/5 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    ge-5/0/4 {
        description "ISP - {{data['<WAN2_ISPNAME>']}} - {{data['<WAN2_DOWN>']}}/{{data['<WAN2_UP>']}} - {{data['<WAN2_CKT_ID>']}} - {{data['<WAN2_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth2;
        }
    }
    ge-5/0/5 {
        description "{{data['<CS_NAME>']}} ge-{{data['<VC_CORE>']}}/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    fab0 {
        fabric-options {
            member-interfaces {
                ge-0/0/2;
            }
        }
    }
    fab1 {
        fabric-options {
            member-interfaces {
                ge-5/0/2;
            }
        }
    }
    {%- endif %}
    {%- if data['<EF_TYPE>'] == 'Cluster' and data['<MODEL>'] == 'SRX1500' %}
    ge-0/0/4 {
        description "ISP - {{data['<WAN1_ISPNAME>']}} - {{data['<WAN1_DOWN>']}}/{{data['<WAN1_UP>']}} - {{data['<WAN1_CKT_ID>']}} - {{data['<WAN1_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth1;
        }
    }
    ge-0/0/5 {
        description "{{data['<CS_NAME>']}} ge-0/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    ge-7/0/4 {
        description "ISP - {{data['<WAN2_ISPNAME>']}} - {{data['<WAN2_DOWN>']}}/{{data['<WAN2_UP>']}} - {{data['<WAN2_CKT_ID>']}} - {{data['<WAN2_SUPPORT_NO>']}}";
        gigether-options {
            redundant-parent reth2;
        }
    }
    ge-7/0/5 {
        description "{{data['<CS_NAME>']}} ge-{{data['<VC_CORE>']}}/0/{{data['<CORE_PORTS>']}}";
        gigether-options {
            redundant-parent reth0;
        }
    }
    fab0 {
        fabric-options {
            member-interfaces {
                ge-0/0/2;
            }
        }
    }
    {%- endif %}
    lo0 {
        unit 0 {
            family inet {
                address {{data['<EF_LOOPBACK>']}}/32;
            }
        }
    }
    {%- if data['<EF_TYPE>'] == 'Cluster' %}
    reth0 {
        vlan-tagging;
        redundant-ether-options {
            redundancy-group 1;
            lacp {
                active;
                periodic slow;
            }
        }
        unit 901 {
            vlan-id 901;
            family inet {
                address {{data['<VL901_EF01>']}}/31;
            }
        }
    }
    reth1 {
        per-unit-scheduler;
        redundant-ether-options {
            redundancy-group 2;
        }
        unit 0 {
            description "ISP 1";
            bandwidth {{data['<WAN1_DOWN>']}};
            family inet {
                address {{data['<WAN1_IP>']}};
            }
        }
    }
    reth2 {
        per-unit-scheduler;
        redundant-ether-options {
            redundancy-group 3;
        }
        unit 0 {
            description "ISP 2";
            bandwidth {{data['<WAN2_DOWN>']}};
            family inet {
                address {{data['<WAN2_IP>']}};
            }
        }
    }
    {%- endif %}
    st0 {
        unit 0 {
            description ATL_TUNNEL_1;
            family inet {
                mtu 1414;
                address {{data['<ATL_TUN1_IP>']}}/31;
            }
        }
        {%- if data['<EF_TYPE>'] == 'Cluster' %}
        unit 1 {
            description ATL_TUNNEL_2;
            family inet {
                mtu 1414;
                address {{data['<ATL_TUN2_IP>']}}/31;
            }
        }
        {%- endif %}
        unit 10 {
            description DAL_TUNNEL_1;
            family inet {
                mtu 1414;
                address {{data['<DAL_TUN1_IP>']}}/31;
            }
        }
        {%- if data['<EF_TYPE>'] == 'Cluster' %}
        unit 11 {
            description DAL_TUNNEL_2;
            family inet {
                mtu 1414;
                address {{data['<DAL_TUN2_IP>']}}/31;
            }
        }
        {%- endif %}
    }
}
snmp {
    location "{{data['<SITE_ADDRESS>']}}";
    community dycom {
        authorization read-only;
    }
    trap-options {
        source-address lo0;
    }
    trap-group dycom {
        version v2;
        targets {
            10.3.4.27;
            10.3.4.67;
            10.135.1.117;
            10.135.1.209;
            10.135.1.234;
        }
    }
}
{%- if data['<EF_TYPE>'] == 'Cluster' %}
event-options {
    policy ISP1_FAIL {
        events PING_TEST_FAILED;
        attributes-match {
            ping_test_failed.test-owner matches ISP1;
            ping_test_failed.test-name matches ISP1;
        }
        then {
            change-configuration {
                commands {
                    "set policy-options policy-statement MASTER_IMPORT term ISP_1_Default then preference 15";
                    "activate event-options policy ISP1_OK";
                    "deactivate event-options policy ISP1_FAIL";
                }
            }
        }
    }
    inactive: policy ISP1_OK {
        events PING_TEST_COMPLETED;
        attributes-match {
            ping_test_completed.test-owner matches ISP1;
            ping_test_completed.test-name matches ISP1;
        }
        then {
            change-configuration {
                commands {
                    "set policy-options policy-statement MASTER_IMPORT term ISP_1_Default then preference 5";
                    "activate event-options policy ISP1_FAIL";
                    "deactivate event-options policy ISP1_OK";
                }
            }
        }
    }
}
{%- endif %}
routing-options {
    graceful-restart;
    static {
        route {{data['<SITE_SUPERNET>']}} {
            next-hop {{data['<VL901_CS01>']}};
            retain;
        }
    }
    aggregate {
        defaults {
            as-path {
                origin igp;
                atomic-aggregate;
                aggregator {{data['<BGP_ASN>']}} {{data['<EF_LOOPBACK>']}};
            }
        }
        route {{data['<SITE_SUPERNET>']}};
    }
    router-id {{data['<EF_LOOPBACK>']}};
    autonomous-system {{data['<BGP_ASN>']}} asdot-notation;
    instance-import MASTER_IMPORT;
    flow {
        term-order standard;
    }
}
protocols {
    bgp {
        mtu-discovery;
        log-updown;
        group HUB_ISP1 {
            type external;
            import [ BGP-HUB_TO_SPOKE-IMPORT BGP-HUB_TRANSIT_TO_SPOKE_1-IMPORT ];
            family inet {
                unicast;
                flow {
                    no-validate FLOW_SPEC;
                }
            }
            family inet6 {
                unicast;
            }
            graceful-restart;
            neighbor {{data['<ATL_TUN1_PEER>']}} {
                export [ BGP-DC-DENY BGP-EXPORT BGP-PRIMARY_1-OUT ];
                peer-as 65499;
            }
            neighbor {{data['<DAL_TUN1_PEER>']}} {
                export [ BGP-DC-DENY BGP-EXPORT BGP-PRIMARY_3-OUT ];
                peer-as 65500;
            }
        }
        group HUB_ISP2 {
            type external;
            import [ BGP-HUB_TO_SPOKE-IMPORT BGP-HUB_TRANSIT_TO_SPOKE_2-IMPORT ];
            family inet {
                unicast;
                flow {
                    no-validate FLOW_SPEC;
                }
            }
            family inet6 {
                unicast;
            }
            graceful-restart;
            {%- if data['<EF_TYPE>'] == 'Cluster' %}
            neighbor {{data['<ATL_TUN2_PEER>']}} {
                export [ BGP-DC-DENY BGP-EXPORT BGP-PRIMARY_2-OUT ];
                peer-as 65499;
            }
            neighbor {{data['<DAL_TUN2_PEER>']}} {
                export [ BGP-DC-DENY BGP-EXPORT BGP-PRIMARY_4-OUT ];
                peer-as 65500;
            }
            {%- endif %}
        }
    }
    lldp {
        management-address {{data['<EF_LOOPBACK>']}};
        port-id-subtype interface-name;
        port-description-type interface-description;
        interface all;
        {%- if data['<MODEL>'] == 'SRX210' %}
        interface fe-0/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] %}
        interface ge-0/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] %}
        interface ge-0/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX300' and data['<EF_TYPE>'] == 'Cluster' %}
        interface ge-1/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX320' and data['<EF_TYPE>'] == 'Cluster' %}
        interface ge-3/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX340' and data['<EF_TYPE>'] == 'Cluster' %}
        interface ge-5/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX1500' and data['<EF_TYPE>'] == 'Cluster' %}
        interface ge-7/0/4 {
            disable;
        }
        {%- endif %}
    }
    lldp-med {
        interface all;
        {%- if data['<MODEL>'] == 'SRX210' %}
        interface fe-0/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] %}
        interface ge-0/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX320' and data['<EF_TYPE>'] == 'Cluster' %}
        interface ge-3/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX340' and data['<EF_TYPE>'] == 'Cluster' %}
        interface ge-5/0/4 {
            disable;
        }
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX1500' and data['<EF_TYPE>'] == 'Cluster' %}
        interface ge-7/0/4 {
            disable;
        }
        {%- endif %}
    }
}
policy-options {
    prefix-list PREFIX-ST0 {
        apply-path "interfaces st0 unit <*> family inet address <*>";
    }
    policy-statement BGP-DC-DENY {
        term DENY_DC_TRANSIT {
            from community DC;
            then reject;
        }
        term NEXT {
            then next policy;
        }
    }
    policy-statement BGP-EXPORT {
        term DENY_DEFAULT {
            from {
                route-filter 0.0.0.0/0 exact;
            }
            then reject;
        }
        term DENY_ISP_1 {
            from {
                instance VR_ISP_1;
                protocol [ access-internal direct ];
            }
            then reject;
        }
        term DENY_ISP_2 {
            from {
                instance VR_ISP_2;
                protocol [ access-internal direct ];
            }
            then reject;
        }
        term AGGREGATE {
            from protocol aggregate;
            then next policy;
        }
        term MORE_SPECIFIC {
            from {
                community MORE_SPECIFIC;
                aggregate-contributor;
            }
            then next policy;
        }
        term DENY_AGGREGATE {
            from aggregate-contributor;
            then reject;
        }
        term eBGP {
            from {
                protocol bgp;
                route-type external;
            }
            then next policy;
        }
        term TUNNEL_BLOCK {
            from {
                protocol direct;
                prefix-list-filter PREFIX-ST0 exact;
            }
            then reject;
        }
        term OTHER {
            from protocol [ direct static ];
            then next policy;
        }
        term REJECT_OTHERS {
            then reject;
        }
    }
    policy-statement BGP-HUB_TO_SPOKE-IMPORT {
        term TEMP_AGG_BLOCK {
            from {
                route-filter 209.64.240.0/20 exact;
            }
            then reject;
        }
        term HUB_PRIMARY_1 {
            from community HUB_PRIMARY_1;
            then {
                local-preference 120;
                accept;
            }
        }
        term HUB_PRIMARY_2 {
            from community HUB_PRIMARY_2;
            then {
                local-preference 119;
                accept;
            }
        }
        term HUB_PRIMARY_3 {
            from community HUB_PRIMARY_3;
            then {
                local-preference 118;
                accept;
            }
        }
        term HUB_PRIMARY_4 {
            from community HUB_PRIMARY_4;
            then {
                local-preference 117;
                accept;
            }
        }
        term HUB_SECONDARY_1 {
            from community HUB_SECONDARY_1;
            then {
                local-preference 116;
                accept;
            }
        }
        term HUB_SECONDARY_2 {
            from community HUB_SECONDARY_2;
            then {
                local-preference 115;
                accept;
            }
        }
        term HUB_SECONDARY_3 {
            from community HUB_SECONDARY_3;
            then {
                local-preference 114;
                accept;
            }
        }
        term HUB_SECONDARY_4 {
            from community HUB_SECONDARY_4;
            then {
                local-preference 113;
                accept;
            }
        }
        term NEXT {
            then next policy;
        }
    }
    policy-statement BGP-HUB_TRANSIT_TO_SPOKE_1-IMPORT {
        term DC_ADJACENT {
            from {
                as-path PEER_ASN;
                community DC;
            }
            then {
                local-preference 120;
                accept;
            }
        }
        term DC_TRANSIT {
            from community DC;
            then {
                local-preference 118;
                accept;
            }
        }
        term REJECT_OTHERS {
            then reject;
        }
    }
    policy-statement BGP-HUB_TRANSIT_TO_SPOKE_2-IMPORT {
        term DC_ADJACENT {
            from {
                as-path PEER_ASN;
                community DC;
            }
            then {
                local-preference 119;
                accept;
            }
        }
        term DC_TRANSIT {
            from community DC;
            then {
                local-preference 117;
                accept;
            }
        }
        term REJECT_OTHERS {
            then reject;
        }
    }
    policy-statement BGP-PRIMARY_1-OUT {
        then {
            community set HUB_PRIMARY_1;
            accept;
        }
    }
    policy-statement BGP-PRIMARY_2-OUT {
        then {
            community set HUB_PRIMARY_2;
            accept;
        }
    }
    policy-statement BGP-PRIMARY_3-OUT {
        then {
            community set HUB_PRIMARY_3;
            accept;
        }
    }
    policy-statement BGP-PRIMARY_4-OUT {
        then {
            community set HUB_PRIMARY_4;
            accept;
        }
    }
    policy-statement BGP-SECONDARY_1-OUT {
        then {
            community set HUB_SECONDARY_1;
            accept;
        }
    }
    policy-statement BGP-SECONDARY_2-OUT {
        then {
            community set HUB_SECONDARY_2;
            accept;
        }
    }
    policy-statement BGP-SECONDARY_3-OUT {
        then {
            community set HUB_SECONDARY_3;
            accept;
        }
    }
    policy-statement BGP-SECONDARY_4-OUT {
        then {
            community set HUB_SECONDARY_4;
            accept;
        }
    }
    policy-statement FLOW_SPEC {
        then accept;
    }
    policy-statement MASTER_IMPORT {
        term ISP_1_Default {
            from {
                instance VR_ISP_1;
                route-filter 0.0.0.0/0 exact;
            }
            then {
                preference 5;
                accept;
            }
        }
        term ISP_2_Default {
            from {
                instance VR_ISP_2;
                route-filter 0.0.0.0/0 exact;
            }
            then {
                preference 10;
                accept;
            }
        }
    }
    policy-statement VR_IMPORT {
        term Direct {
            from {
                instance master;
                protocol direct;
            }
            then accept;
        }
        term Else {
            then reject;
        }
    }
    community DC members 26536:500;
    community HUB_PRIMARY_1 members 26536:120;
    community HUB_PRIMARY_2 members 26536:119;
    community HUB_PRIMARY_3 members 26536:118;
    community HUB_PRIMARY_4 members 26536:117;
    community HUB_SECONDARY_1 members 26536:116;
    community HUB_SECONDARY_2 members 26536:115;
    community HUB_SECONDARY_3 members 26536:114;
    community HUB_SECONDARY_4 members 26536:113;
    community MORE_SPECIFIC members 26536:600;
    as-path PEER_ASN .;
}
class-of-service {
    classifiers {
        dscp default-classifier {
            import default;
        }
    }
    forwarding-classes {
        queue 0 best-effort priority low;
        queue 1 expedited-forwarding priority high;
        queue 2 assured-forwarding priority low;
        queue 3 network-control priority high;
    }
    interfaces {
        {%- if data['<MODEL>'] == 'SRX210' %}
        fe-0/0/4 {
            unit 0 {
                scheduler-map DII-SCHED-MAP01;
                shaping-rate {{data['<WAN1_UP>']}};
                classifiers {
                    dscp default-classifier;
                }
            }
        }
        {%- endif %}
        {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] and data['<EF_TYPE>'] == 'Single' %}
        ge-0/0/4 {
            unit 0 {
                scheduler-map DII-SCHED-MAP01;
                shaping-rate {{data['<WAN1_UP>']}};
                classifiers {
                    dscp default-classifier;
                }
            }
        }
        {%- endif %}
        {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] and data['<EF_TYPE>'] == 'Cluster' %}
        reth1 {
            unit 0 {
                scheduler-map DII-SCHED-MAP01;
                shaping-rate {{data['<WAN1_UP>']}};
                classifiers {
                    dscp default-classifier;
                }
            }
        }
        reth2 {
            unit 0 {
                scheduler-map DII-SCHED-MAP01;
                shaping-rate {{data['<WAN2_UP>']}};
                classifiers {
                    dscp default-classifier;
                }
            }
        }
        {%- endif %}
    }
    rewrite-rules {
        dscp REWRITE-DSCPS {
            forwarding-class best-effort {
                loss-priority low code-point 000000;
                loss-priority high code-point 000001;
            }
            forwarding-class expedited-forwarding {
                loss-priority low code-point 101110;
                loss-priority high code-point 101111;
            }
            forwarding-class assured-forwarding {
                loss-priority low code-point 001010;
                loss-priority high code-point 001100;
            }
            forwarding-class network-control {
                loss-priority low code-point 110000;
                loss-priority high code-point 110001;
            }
        }
    }
    scheduler-maps {
        DII-SCHED-MAP01 {
            forwarding-class best-effort scheduler best-effort-sch;
            forwarding-class assured-forwarding scheduler assured-forwarding-sch;
            forwarding-class expedited-forwarding scheduler expedited-forwarding-sch;
            forwarding-class network-control scheduler network-control-sch;
        }
    }
    schedulers {
        best-effort-sch {
            transmit-rate percent 70;
            buffer-size percent 70;
            priority low;
        }
        network-control-sch {
            transmit-rate percent 5;
            buffer-size percent 5;
            priority high;
        }
        assured-forwarding-sch {
            transmit-rate percent 5;
            buffer-size percent 5;
            priority low;
        }
        expedited-forwarding-sch {
            transmit-rate percent 20;
            buffer-size percent 20;
            priority high;
        }
    }
}
routing-instances {
    VR_ISP_1 {
        instance-type virtual-router;
        {%- if data['<EF_TYPE>'] == 'Cluster' %}
        interface reth1.0;
        {%- endif %}
        {%- if data['<MODEL>'] != 'SRX210' and data['<EF_TYPE>'] == 'Single' %}
        interface ge-0/0/4.0;
        {%- endif %}
        {%- if data['<MODEL>'] == 'SRX210' %}
        interface fe-0/0/4.0;
        {%- endif %}
        routing-options {
            graceful-restart;
            {%- if data['<DHCP>'] == 'No' %}
            static {
                route 0.0.0.0/0 {
                    next-hop {{data['<WAN1_GW>']}};
                    retain;
                }
            }
            {%- endif %}
            instance-import VR_IMPORT;
        }
    }
    VR_ISP_2 {
        instance-type virtual-router;
        {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] and data['<EF_TYPE>'] == 'Cluster' %}
        interface reth2.0;
        {%- endif %}
        routing-options {
            {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] and data['<EF_TYPE>'] == 'Cluster' %}
            graceful-restart;
            {%- endif %}
    {%- if data['<MODEL>'] in ['SRX300', 'SRX320', 'SRX340', 'SRX1500'] and data['<EF_TYPE>'] == 'Cluster' %}
            static {
                route 0.0.0.0/0 {
                    next-hop {{data['<WAN2_GW>']}};
                    retain;
                }
            }
    {%- endif %}
            instance-import VR_IMPORT;
        }
    }
}


